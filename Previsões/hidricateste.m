% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 09-Oct-2019 13:02:58
%
% This script assumes these variables are defined:
%
%   hidricainput - input data.
%   H_drica_D_ - target data.
hidricainput=[H_drica_D_1__1 Hidrica_D_6_ Pluviosidade_D_1__1 MsD1]; %38.9922
x = hidricainput';
t = H_drica_D_';

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.

% Create a Fitting Network
hiddenLayerSize = 9;
nethidrica = fitnet(hiddenLayerSize,trainFcn);

% Setup Division of Data for Training, Validation, Testing
nethidrica.divideParam.trainRatio = 70/100;
nethidrica.divideParam.valRatio = 15/100;
nethidrica.divideParam.testRatio = 15/100;

% Train the Network
[nethidrica,tr] = train(nethidrica,x,t);

% Test the Network
y = nethidrica(x);
e = gsubtract(t,y);
performance = perform(nethidrica,t,y)

% View the Network
view(nethidrica)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotregression(t,y)
%figure, plotfit(net,x,t)

%calculo dos erros de previs?o%
k=11686; %espa?o temporal de previs?o
forecast=[saidahidrica];

actual=[hidricareal]';

%%MAPEEEE%
lambdabar1=(1/k)*sum(forecast);
erro1=actual-forecast; %diferen?a entre real e previsto
erroabs1=abs(erro1);
PE1=(erroabs1/lambdabar1)*100;
MAPE1=sum(PE1)/k;