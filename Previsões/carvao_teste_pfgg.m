% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 08-Oct-2019 09:51:50
%
% This script assumes these variables are defined:
%
%   carvao_teste_input - input data.
%   Carvao_D_ - target data.
carvao_teste_input=[Carvao_D_1__1 Carvao_D_6_ Pre_o_D_ Pre_o_D_6_];
%carvao_teste_input=[Carvao_D_1__1 Carvao_D_6_];
x = carvao_teste_input';
t = Carvao_D_';

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.

% Create a Fitting Network
hiddenLayerSize = 7;
netcarvao = fitnet(hiddenLayerSize,trainFcn);

% Setup Division of Data for Training, Validation, Testing
netcarvao.divideParam.trainRatio = 80/100;
netcarvao.divideParam.valRatio = 15/100;
netcarvao.divideParam.testRatio = 15/100;

% Train the Network
[netcarvao,tr] = train(netcarvao,x,t);

% Test the Network
y = netcarvao(x);
e = gsubtract(t,y);
performance = perform(netcarvao,t,y)

% View the Network
view(netcarvao)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotregression(t,y)
%figure, plotfit(net,x,t)

%calculo dos erros de previs?o%
k=11686; %espa?o temporal de previs?o
forecast=[carvao_saida_teste];
Xreal=Carvao_D_1_;
actual=[Xreal]';

%%MAPEEEE%
lambdabar1=(1/k)*sum(forecast);
erro1=actual-forecast; %diferen?a entre real e previsto
erroabs1=abs(erro1);
PE1=(erroabs1/lambdabar1)*100;
MAPE1=sum(PE1)/k;