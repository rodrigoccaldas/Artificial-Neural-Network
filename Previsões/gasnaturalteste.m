% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 08-Oct-2019 10:54:47
%
% This script assumes these variables are defined:
%
%   gasnaturalinput - input data.
%   GN_D_ - target data.
gasnaturalinput=[GN_D_1__1 GN_D_6_ DDS_D_ Consumo_D_6__1]; %34.2015 ber com o D
x = gasnaturalinput';
t = GN_D_';

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.

% Create a Fitting Network
hiddenLayerSize = 9;
netgas = fitnet(hiddenLayerSize,trainFcn);

% Setup Division of Data for Training, Validation, Testing
netgas.divideParam.trainRatio = 70/100;
netgas.divideParam.valRatio = 15/100;
netgas.divideParam.testRatio = 15/100;

% Train the Network
[netgas,tr] = train(netgas,x,t);

% Test the Network
y = netgas(x);
e = gsubtract(t,y);
performance = perform(netgas,t,y)

% View the Network
view(netgas)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotregression(t,y)
%figure, plotfit(net,x,t)

%calculo dos erros de previs?o%
k=11686; %espa?o temporal de previs?o
forecast=[saidagas];
Xreal=GN_D_1_;
actual=[Xreal]';

%%MAPEEEE%
lambdabar1=(1/k)*sum(forecast);
erro1=actual-forecast; %diferen?a entre real e previsto
erroabs1=abs(erro1);
PE1=(erroabs1/lambdabar1)*100;
MAPE1=sum(PE1)/k;