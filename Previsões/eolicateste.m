% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 09-Oct-2019 10:15:59
%
% This script assumes these variables are defined:
%
%   eolicainput - input data.
%   ElicaD - target data.
eolicainput=[E_lica_D_1_ Vento_D_1_ DireoD1]; %ERRO DE 29,1049
x = eolicainput';
t = ElicaD';

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.

% Create a Fitting Network
hiddenLayerSize = 7;
neteolica = fitnet(hiddenLayerSize,trainFcn);

% Setup Division of Data for Training, Validation, Testing
neteolica.divideParam.trainRatio = 70/100;
neteolica.divideParam.valRatio = 15/100;
neteolica.divideParam.testRatio = 15/100;

% Train the Network
[neteolica,tr] = train(neteolica,x,t);

% Test the Network
y = neteolica(x);
e = gsubtract(t,y);
performance = perform(neteolica,t,y)

% View the Network
view(neteolica)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotregression(t,y)
%figure, plotfit(net,x,t)



%calculo dos erros de previs?o%
k=11686; %espa?o temporal de previs?o
forecast=[saidaeolicateste];
eolicareal=ElicaD2;
actual=[eolicareal]';

%%MAPEEEE%
lambdabar1=(1/k)*sum(forecast);
erro1=actual-forecast; %diferen?a entre real e previsto
erroabs1=abs(erro1);
PE1=(erroabs1/lambdabar1)*100;
MAPE1=sum(PE1)/k;


%grafico
figure;
plot(eolicareal,'black','LineWidth',1);
hold on
plot(output,'red','LineWidth',0.3);
hold on